---
title: "2.2 Schleifen und Funktionen"
execute: 
  output: false
---

Wir werden zwei wichtige Konzepte behandeln - Funktionen und Schleifen. Mit Funktionen können wir einen Code in einen Block auslagern, ihn benennen und wiederbenutzen. Mit Schleifen können wir Code ausführen, bis eine bestimmte Bedingung erfüllt ist.

### Schleifen

```{r}
# Was macht diese Schleife?
# (1) Sie definiert die Variable i. Diese Variable nimmt alle Werte von 1 bis 10 an
# (sie "iteriert" über die Zahlen 1 bis 10).
# (2) Alles, was innerhalb der Schleife steht, kann auf i zugreifen.
# (3) Im Inneren der Schleife wird der jeweilige Wert von i in die Konsole ausgegeben.
for (i in 1:10) {
  print(i)
}
```

```{r}
# Wir können nicht nur über Zahlen iterieren:
farben <- c("rot", "gelb", "grün")

# Es wird das Folgende ausgegeben:
# Ich mag die Farbe rot
# Ich mag die Farbe gelb
# Ich mag die Farbe grün
for (farbe in farben) {
  nachricht <- paste("Ich mag die Farbe", farbe)
  print(nachricht)
}
```

#### Aufgabe 1

Die Fibonaccifolge ist eine Folge, die mit den Zahlen $1, 1, 2, 3, 5, 8, ...$ beginnt.

1.  Welche Vorschrift beschreibt diese Folge?
2.  Implementiere die Fibonaccifolge: Schreibe Code, der die ersten 20 Zahlen dieser Folge ausgibt.

::: {.callout-note collapse="true" appearance="minimal" icon="false"}
## Lösung 1.

Die Vorschrift der Fibonaccifolge lautet $F_n=F_{n-1}+F_{n-2}$.
:::

```{r}
#| code-fold: true
#| code-summary: "Lösung 2."
#| eval: false

fib <- rep(NA, 10)

fib[1] <- 1
fib[2] <- 1

for (n in 3:length(fib)) {
  fib[n] <- fib[n-1] + fib[n-2]
}

fib
```

#### Aufgabe 2

Illustriere an einem Beispiel, dass folgende Aussage für alle $n \geq 1$ gilt:

$$
n^2 = \sum\limits_{k=1}^n [2k-1]
$$

Es reicht, wenn du beispielsweise alle $n \leq 50$ betrachtest.

::: {.callout-note collapse="true" appearance="minimal" icon="false"}
## Tipp

$\sum\limits_{k=1}^n [2k-1]$ kann auch geschrieben werden als $1+3+5+...+(2n-1)$.
:::

```{r}
#| code-fold: true
#| code-summary: "Lückencode"
#| eval: false

# 2k-1 für 1 <= k <= 50 sind alle ungeraden Zahlen von 1 bis 100.
x <- seq(from = ..., to = ..., by = ...)

# Wir erstellen einen leeren Vektor y der Länge von x:
y <- rep(..., length = ...)

# Wir schreiben eine Schleife, die für jedes n <= 50 die Summe von k=1 bis n von 2k-1 berechnet und in y speichert.
for (i in 1:length(x)) {
  y[i] <- sum(...)
}

# y besteht aus allen Quadratzahlen von 1 bis 50.
y
```

### Funktionen
